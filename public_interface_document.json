{
  "package_name": "com.com.walturn.gyde_app",
  "project_description": "A Flutter project using the Stacked architecture, featuring routing, dependency injection, and dialog/bottom sheet management. The app provides a luxury chauffeur service with an onboarding flow, now enhanced with ViewModels for each onboarding view to improve maintainability and separation of concerns.",
  "architecture_overview": "The application follows the Stacked architecture with separate folders for app setup, features, UI components, and utilities. It uses Stacked for state management, routing, and dependency injection. The onboarding flow for the Gyde luxury chauffeur service is implemented with multiple pages and sliding transitions, each now having a corresponding ViewModel.",
  "folder_structure": {
    "lib": {
      "app": {
        "app.bottomsheets.dart": {},
        "app.dart": {},
        "app.dialogs.dart": {},
        "app.locator.dart": {},
        "app.router.dart": {}
      },
      "features": {
        "app": {
          "app_view.dart": {},
          "app_viewmodel.dart": {}
        },
        "home": {
          "home_view.dart": {},
          "home_viewmodel.dart": {}
        },
        "startup": {
          "startup_view.dart": {},
          "startup_viewmodel.dart": {}
        },
        "onboarding": {
          "welcome_view.dart": {},
          "welcome_viewmodel.dart": {},
          "auth_options_view.dart": {},
          "auth_options_viewmodel.dart": {},
          "phone_input_view.dart": {},
          "phone_input_viewmodel.dart": {},
          "verification_code_view.dart": {},
          "verification_code_viewmodel.dart": {},
          "email_collection_view.dart": {},
          "email_collection_viewmodel.dart": {},
          "welcome_confirmation_view.dart": {},
          "welcome_confirmation_viewmodel.dart": {},
          "terms_conditions_view.dart": {},
          "terms_conditions_viewmodel.dart": {}
        }
      },
      "ui": {
        "bottom_sheets": {
          "notice": {
            "notice_sheet.dart": {},
            "notice_sheet_model.dart": {}
          }
        },
        "common": {
          "app_colors.dart": {},
          "ui_helpers.dart": {}
        },
        "dialogs": {
          "info_alert": {
            "info_alert_dialog.dart": {},
            "info_alert_dialog_model.dart": {}
          }
        }
      },
      "main.dart": {}
    }
  },
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView, Onboarding views), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart",
        "package:my_app/features/onboarding/welcome_view.dart",
        "package:my_app/features/onboarding/auth_options_view.dart",
        "package:my_app/features/onboarding/phone_input_view.dart",
        "package:my_app/features/onboarding/verification_code_view.dart",
        "package:my_app/features/onboarding/email_collection_view.dart",
        "package:my_app/features/onboarding/welcome_confirmation_view.dart",
        "package:my_app/features/onboarding/terms_conditions_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_view.dart",
      "description": "The welcome page of the onboarding flow, now using WelcomeViewModel.",
      "class_diagram": "@startuml\nclass WelcomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/welcome_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_viewmodel.dart",
      "description": "ViewModel for the WelcomeView, manages the state and logic.",
      "class_diagram": "@startuml\nclass WelcomeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/auth_options_view.dart",
      "description": "The authentication options page of the onboarding flow, now using AuthOptionsViewModel.",
      "class_diagram": "@startuml\nclass AuthOptionsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/auth_options_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/auth_options_viewmodel.dart",
      "description": "ViewModel for the AuthOptionsView, manages the state and logic.",
      "class_diagram": "@startuml\nclass AuthOptionsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/phone_input_view.dart",
      "description": "The phone number input page of the onboarding flow, now using PhoneInputViewModel.",
      "class_diagram": "@startuml\nclass PhoneInputView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/phone_input_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/phone_input_viewmodel.dart",
      "description": "ViewModel for the PhoneInputView, manages the state and logic.",
      "class_diagram": "@startuml\nclass PhoneInputViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/verification_code_view.dart",
      "description": "The verification code page of the onboarding flow, now using VerificationCodeViewModel.",
      "class_diagram": "@startuml\nclass VerificationCodeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/verification_code_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/verification_code_viewmodel.dart",
      "description": "ViewModel for the VerificationCodeView, manages the state and logic.",
      "class_diagram": "@startuml\nclass VerificationCodeViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/email_collection_view.dart",
      "description": "The email collection page of the onboarding flow, now using EmailCollectionViewModel.",
      "class_diagram": "@startuml\nclass EmailCollectionView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/email_collection_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/email_collection_viewmodel.dart",
      "description": "ViewModel for the EmailCollectionView, manages the state and logic.",
      "class_diagram": "@startuml\nclass EmailCollectionViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_confirmation_view.dart",
      "description": "The welcome confirmation page of the onboarding flow, now using WelcomeConfirmationViewModel.",
      "class_diagram": "@startuml\nclass WelcomeConfirmationView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/welcome_confirmation_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/welcome_confirmation_viewmodel.dart",
      "description": "ViewModel for the WelcomeConfirmationView, manages the state and logic.",
      "class_diagram": "@startuml\nclass WelcomeConfirmationViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/terms_conditions_view.dart",
      "description": "The terms and conditions page of the onboarding flow, now using TermsConditionsViewModel.",
      "class_diagram": "@startuml\nclass TermsConditionsView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/terms_conditions_viewmodel.dart"
      ]
    },
    {
      "name": "lib/features/onboarding/terms_conditions_viewmodel.dart",
      "description": "ViewModel for the TermsConditionsView, manages the state and logic.",
      "class_diagram": "@startuml\nclass TermsConditionsViewModel\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "src/lib/app/app.dart",
      "description": "This file defines the main application class and its dependencies, routes, dialogs, and bottom sheets.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:gyde_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:gyde_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:gyde_app/features/home/home_view.dart",
        "package:gyde_app/features/startup/startup_view.dart",
        "package:gyde_app/features/onboarding/welcome_view.dart",
        "package:gyde_app/features/onboarding/auth_options_view.dart",
        "package:gyde_app/features/onboarding/phone_input_view.dart",
        "package:gyde_app/features/onboarding/verification_code_view.dart",
        "package:gyde_app/features/onboarding/email_collection_view.dart",
        "package:gyde_app/features/onboarding/welcome_confirmation_view.dart",
        "package:gyde_app/features/onboarding/terms_conditions_view.dart",
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "src/lib/features/home/home_viewmodel.dart",
      "description": "This file defines the HomeViewModel class, which extends the BaseViewModel class. It contains methods to show a dialog and a bottom sheet.",
      "class_diagram": "",
      "methods": [
        {
          "name": "showDialog",
          "description": "This method shows a custom dialog with a specific variant, title, and description.",
          "parameters": [],
          "return_type": null
        },
        {
          "name": "showBottomSheet",
          "description": "This method shows a custom bottom sheet with a specific variant, title, and description.",
          "parameters": [],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:gyde_app/app/app.bottomsheets.dart",
        "package:gyde_app/app/app.dialogs.dart",
        "package:gyde_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/auth_options_view.dart",
      "description": "This file defines the AuthOptionsView class, a StatelessWidget that provides the user with authentication options during onboarding.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for this view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "auth_options_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/auth_options_viewmodel.dart",
      "description": "This file defines the AuthOptionsViewModel class, which extends the BaseViewModel class and includes methods for handling authentication options.",
      "class_diagram": "",
      "methods": [
        {
          "name": "handleAuthOptionSelected",
          "description": "Handles the logic for when an authentication option is selected.",
          "parameters": [
            "option"
          ],
          "return_type": null
        },
        {
          "name": "proceedWithAuthOption",
          "description": "Proceeds with the selected authentication option, performing necessary operations and state updates.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/email_collection_view.dart",
      "description": "This file defines a StatelessWidget that collects the user's email address during the onboarding process.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for this screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/email_collection_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/email_collection_viewmodel.dart",
      "description": "This file defines the EmailCollectionViewModel class, which extends the BaseViewModel class from the stacked package. It includes methods for setting and submitting an email.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setEmail",
          "description": "Sets the email property of the EmailCollectionViewModel instance.",
          "parameters": [
            "email"
          ],
          "return_type": "void"
        },
        {
          "name": "submitEmail",
          "description": "Submits the email. This method is asynchronous and may include logic to handle email submission, such as an API call.",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/phone_input_view.dart",
      "description": "This file defines a PhoneInputView class which is a StatelessWidget. It provides a user interface for phone number input during the onboarding process.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the phone input view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/phone_input_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/phone_input_viewmodel.dart",
      "description": "This file defines the PhoneInputViewModel class, which extends the BaseViewModel class. It is responsible for handling the logic related to phone number input, including updating the phone number, submitting the phone number, and validating the phone number.",
      "class_diagram": "",
      "methods": [
        {
          "name": "updatePhoneNumber",
          "description": "Updates the phone number.",
          "parameters": [
            "newNumber"
          ],
          "return_type": "void"
        },
        {
          "name": "submitPhoneNumber",
          "description": "Submits the phone number. If the phone number is valid, it navigates to the next view. Otherwise, it shows a validation error.",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "_isPhoneNumberValid",
          "description": "Validates the phone number. Returns true if the phone number is not empty and has a length of 10.",
          "parameters": [
            "phoneNumber"
          ],
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/terms_conditions_view.dart",
      "description": "This file defines the TermsConditionsView class, which is a StatelessWidget that displays the terms and conditions of the app.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the terms and conditions view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/terms_conditions_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/terms_conditions_viewmodel.dart",
      "description": "This file defines the ViewModel for the Terms and Conditions view in the onboarding process. It manages the state and logic related to the terms and conditions view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "toggleTermsAccepted",
          "description": "Method to update the acceptance status",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "onAcceptTerms",
          "description": "Method to handle the logic for when terms are accepted",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/verification_code_view.dart",
      "description": "This file defines a VerificationCodeView class which is a StatelessWidget. It provides a view for the user to enter their verification code.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for this view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/verification_code_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/verification_code_viewmodel.dart",
      "description": "This file defines the VerificationCodeViewModel class, which extends the BaseViewModel class. It includes methods for setting and getting the verification code, verifying the code, and resending the code.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setVerificationCode",
          "description": "Setter for the verification code that updates the UI when changed",
          "parameters": [
            "code"
          ],
          "return_type": "void"
        },
        {
          "name": "verifyCode",
          "description": "Method to verify the code entered by the user",
          "parameters": [],
          "return_type": "Future<void>"
        },
        {
          "name": "resendCode",
          "description": "Method to resend the verification code",
          "parameters": [],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/welcome_confirmation_view.dart",
      "description": "This file defines a StatelessWidget that displays a welcome confirmation view.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for this view.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/welcome_confirmation_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/welcome_confirmation_viewmodel.dart",
      "description": "This file defines the ViewModel for the WelcomeConfirmationView. It extends the BaseViewModel from the stacked package and includes methods for handling the state and logic of the WelcomeConfirmationView.",
      "class_diagram": "@startuml\nWelcomeConfirmationViewModel <|-- BaseViewModel\nclass WelcomeConfirmationViewModel {\n+void confirmWelcome()\n}\n@enduml",
      "methods": [
        {
          "name": "confirmWelcome",
          "description": "Handles the confirmation action for the WelcomeConfirmationView.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/welcome_view.dart",
      "description": "This file defines the WelcomeView class, which is a StatelessWidget that displays the welcome screen of the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "build",
          "description": "Builds the widget tree for the welcome screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:my_app/features/onboarding/welcome_viewmodel.dart"
      ]
    },
    {
      "name": "src/lib/features/onboarding/welcome_viewmodel.dart",
      "description": "This file contains the ViewModel for the WelcomeView. It extends the BaseViewModel from the stacked package and includes methods for initializing the view and handling user interactions.",
      "class_diagram": "",
      "methods": [
        {
          "name": "initialize",
          "description": "Initializes any data or state required by the WelcomeView",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "onContinueButtonPressed",
          "description": "Handles user interactions or business logic for when the continue button is pressed",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant OnboardingViews\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> OnboardingViews: Navigate to onboarding\nOnboardingViews -> HomeView: Complete onboarding\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "State is managed using the Stacked architecture. ViewModels (e.g., HomeViewModel, StartupViewModel, and onboarding ViewModels) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, while app.router.dart manages navigation between views.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs AppView. AppView initializes the Stacked architecture and shows the StartupView. After completing initialization logic, it navigates to the onboarding flow. Upon completion of onboarding, it navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart."
}